import streamlit as st
import numpy as np
import pandas as pd
import joblib
import os

st.set_page_config(page_title="Qualit√© de l'eau potable", page_icon="üíß", layout="centered")

st.title("üíß Application IA pour la pr√©diction des param√®tres de l'eau potable")

image_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Water_drop_001.jpg/800px-Water_drop_001.jpg"
st.image(image_url, caption="Analyse de la qualit√© de l'eau", use_column_width=True)



st.markdown("""
Bienvenue dans cette application d√©velopp√©e dans le cadre d'un projet scientifique üë©‚Äçüî¨üßë‚Äçüî¨  
Elle permet de **pr√©dire un param√®tre manquant** parmi 23 mesures de qualit√© d'eau.

---

### ‚ú® Comment l'utiliser :
1. S√©lectionne le **param√®tre √† pr√©dire**
2. Renseigne les **22 autres valeurs mesur√©es**
3. Clique sur **"Pr√©dire le param√®tre manquant"**
4. Consulte la valeur estim√©e

---

### üìò Param√®tres disponibles :
- Physico-chimiques (pH, turbidit√©, temp√©rature, etc.)
- Bact√©riologiques (Coliformes, E. coli, etc.)
- Min√©raux (Calcium, Fer, Nitrates‚Ä¶)

---

> D√©velopp√© avec ‚ù§Ô∏è par [TonNom]  
> Bas√© sur un mod√®le Random Forest Regressor
""")
import streamlit as st
import numpy as np
import pandas as pd
import joblib
import os

# Liste des 23 param√®tres
parametres = [
    'Total Coliform', 'Escherichia Coli', 'Faecal Streptococci', 'Turbidity', 'pH', 'Temperature',
    'Free Chlorine', 'Chlorates', 'Sulfate', 'Magnesium', 'Calcium', 'Conductivity', 'Dry Residue',
    'Complete Alkaline Title', 'Nitrite', 'Ammonium', 'Phosphate', 'Nitrate', 'Iron', 'Manganese',
    'Colour', 'Smell', 'Taste'
]

st.title("üíß Pr√©diction d‚Äôun param√®tre manquant")

# S√©lection du param√®tre √† pr√©dire
parametre_cible = st.selectbox("Quel param√®tre veux-tu pr√©dire ?", parametres)

# Chargement du bon mod√®le
model_filename = f"modele_{parametre_cible.replace(' ', '_')}.pkl"

if not os.path.exists(model_filename):
    st.error(f"‚ùå Le mod√®le '{model_filename}' n'existe pas. V√©rifie son nom ou entra√Æne-le.")
    st.stop()

model = joblib.load(model_filename)

st.info(f"‚úÖ Mod√®le charg√© : {model_filename}")

# Interface de saisie ou chargement d‚Äôun fichier
st.markdown("### üî¢ Saisie des 22 autres param√®tres :")

valeurs = []
for param in parametres:
    if param != parametre_cible:
        val = st.number_input(param, value=0.0, format="%.4f")
        valeurs.append(val)

# Pr√©diction
if st.button("Pr√©dire le param√®tre manquant"):
    X_input = np.array(valeurs, dtype=np.float64).reshape(1, -1)
    prediction = model.predict(X_input)
    st.success(f"üîç Pr√©diction pour **{parametre_cible}** : `{prediction[0]:.4f}`")
