import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime
from fpdf import FPDF
import io
from tensorflow.keras.models import load_model

# Configuration de la page
st.set_page_config(
    page_title="Analyse de la Qualit√© de l'Eau",
    page_icon="üíß",
    layout="wide"
)

# Style CSS pour am√©liorer l'esth√©tique
st.markdown("""
<style>
body {
    background-color: #f0f4f8;
}
h1, h2, h3 {
    color: #0077b6;
    font-family: 'Segoe UI', sans-serif;
}
.stButton > button {
    background-color: #0077b6;
    color: white;
    border: none;
    padding: 0.5em 1.3em;
    border-radius: 8px;
    font-weight: 600;
    transition: background-color 0.3s ease;
}
.stButton > button:hover {
    background-color: #005f8a;
}
.stSelectbox, .stTextInput, .stNumberInput {
    border-radius: 6px;
    border: 1px solid #d1d5db;
    padding: 0.4em 0.7em;
}
.stDownloadButton > button {
    background-color: #00b4d8;
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    transition: background-color 0.3s ease;
}
.stDownloadButton > button:hover {
    background-color: #0096c7;
}
.header {
    text-align: center;
    margin-bottom: 20px;
}
.image-container {
    display: flex;
    justify-content: center;
    margin: 20px 0;
}
.image-container img {
    width: 300px;
    margin: 0 10px;
}
</style>
""", unsafe_allow_html=True)

# Fonction pour afficher la page d'accueil
def show_home_page():
    st.title("üíß Application d'Analyse de la Qualit√© de l'Eau")
    st.markdown("""
    <div class="header">
        <h2>Bienvenue dans notre application d'analyse de la qualit√© de l'eau</h2>
        <p>Cette application permet de surveiller, analyser et pr√©dire la qualit√© de l'eau selon les normes alg√©riennes (NA 6361-2016).</p>
    </div>
    """, unsafe_allow_html=True)

    # Ajout d'images d'illustration
    st.markdown("<div class='image-container'>", unsafe_allow_html=True)
    st.markdown("<img src='https://example.com/image1.jpg' alt='Image 1'>", unsafe_allow_html=True)  # Remplacez par vos images
    st.markdown("<img src='https://example.com/image2.jpg' alt='Image 2'>", unsafe_allow_html=True)  # Remplacez par vos images
    st.markdown("</div>", unsafe_allow_html=True)

    if st.button("üöÄ Acc√©der √† l'application"):
        st.session_state.page = "main"

# Fonction pour afficher le menu de navigation
def show_navigation():
    st.sidebar.title("üåê Navigation")
    page = st.sidebar.radio("Aller vers :", [
        "Accueil",
        "Gestion des Pr√©l√®vements",
        "Classification",
        "Pr√©diction d'un Param√®tre",
        "D√©tection de Pollution",
        "Assistant IA",
        "Exportation"
    ])
    st.session_state.page = page

# Fonction pour afficher la page principale
def show_main_page():
    st.title("üíß Analyse de la Qualit√© de l'Eau")
    st.markdown("Cette application permet de surveiller, analyser et pr√©dire la qualit√© de l'eau selon les normes alg√©riennes (NA 6361-2016).")

    # Liste des 23 param√®tres
    parametres = [
        'Total Coliform', 'Escherichia Coli', 'Faecal Streptococci', 'Turbidity', 'pH', 'Temperature',
        'Free Chlorine', 'Chlorates', 'Sulfate', 'Magnesium', 'Calcium', 'Conductivity', 'Dry Residue',
        'Complete Alkaline Title', 'Nitrite', 'Ammonium', 'Phosphate', 'Nitrate', 'Iron', 'Manganese',
        'Colour', 'Smell', 'Taste'
    ]

    # Gestion des pr√©l√®vements
    st.header("üìã Gestion des Pr√©l√®vements Journaliers")
    if "df_prel√®vements" not in st.session_state:
        st.session_state.df_prel√®vements = pd.DataFrame(columns=["Date", "Heure", "Entreprise", "Code", "Pr√©leveur", "Localisation", "Analyste"] + parametres)

    with st.form("form_prelevement"):
        st.subheader("Saisir un nouveau pr√©l√®vement")
        date = st.date_input("Date", value=datetime.today())
        heure = st.time_input("Heure")
        entreprise = st.text_input("Entreprise")
        code = st.text_input("Code")
        preleveur = st.text_input("Pr√©leveur")
        localisation = st.text_input("Localisation")
        analyste = st.text_input("Analyste")

        st.markdown("### üî¨ R√©sultats des param√®tres")
        resultats = {}
        for param in parametres:
            resultats[param] = st.number_input(param, value=0.0, format="%.4f", key=f"val_{param}")

        submitted = st.form_submit_button("üíæ Enregistrer le pr√©l√®vement")
        if submitted:
            new_data = {
                "Date": date,
                "Heure": heure,
                "Entreprise": entreprise,
                "Code": code,
                "Pr√©leveur": preleveur,
                "Localisation": localisation,
                "Analyste": analyste,
            }
            new_data.update(resultats)
            st.session_state.df_prel√®vements = pd.concat([
                st.session_state.df_prel√®vements,
                pd.DataFrame([new_data])
            ], ignore_index=True)
            st.session_state.df_prel√®vements.to_pickle("prelevements_sauvegarde.pkl")
            st.success("‚úÖ Pr√©l√®vement enregistr√© avec succ√®s.")

    # Affichage du tableau des pr√©l√®vements
    st.markdown("### üìä Tableau des Pr√©l√®vements")
    if not st.session_state.df_prel√®vements.empty:
        st.dataframe(st.session_state.df_prel√®vements)
    else:
        st.info("Aucune donn√©e enregistr√©e pour le moment.")

# Fonction pour la classification
def classify_samples():
    st.header("üß™ Classification de la Qualit√© de l'Eau")
    uploaded_file = st.file_uploader("üì§ Charger un fichier contenant les param√®tres d‚Äôanalyse", type=["xlsx", "csv"])

    if uploaded_file:
        try:
            if uploaded_file.name.endswith(".csv"):
                df_uploaded = pd.read_csv(uploaded_file)
            else:
                df_uploaded = pd.read_excel(uploaded_file)

            st.success("‚úÖ Fichier import√© avec succ√®s !")
            st.dataframe(df_uploaded)

            # V√©rification des colonnes n√©cessaires
            if not all(param in df_uploaded.columns for param in parametres):
                st.error("‚ùå Le fichier import√© ne contient pas toutes les colonnes n√©cessaires.")
            else:
                model_class = joblib.load("modele_Classification.pk1")
                X = df_uploaded[parametres]
                y_pred = model_class.predict(X)
                classes = {0: "Bonne", 1: "Mauvaise", 2: "Moyenne", 3: "Tr√®s bonne", 4: "Tr√®s mauvaise"}
                df_uploaded["Classe Pr√©dite"] = [classes.get(i, "Inconnue") for i in y_pred]
                st.success("‚úÖ Classification effectu√©e.")
                st.dataframe(df_uploaded)

                # Conseils apr√®s classification
                st.markdown("### üìù Conseils apr√®s Classification")
                for index, row in df_uploaded.iterrows():
                    classe = row["Classe Pr√©dite"]
                    if classe == "Mauvaise":
                        st.warning(f"‚ö†Ô∏è Pr√©l√®vement {index + 1}: La qualit√© de l'eau est **Mauvaise**. Recommandation: V√©rifiez la source et effectuez des tests suppl√©mentaires.")
                    elif classe == "Moyenne":
                        st.info(f"‚ÑπÔ∏è Pr√©l√®vement {index + 1}: La qualit√© de l'eau est **Moyenne**. Recommandation: Surveillez r√©guli√®rement la qualit√©.")
                    elif classe == "Bonne":
                        st.success(f"‚úÖ Pr√©l√®vement {index + 1}: La qualit√© de l'eau est **Bonne**. Continuez √† surveiller.")

        except Exception as e:
            st.error(f"‚ùå Erreur de traitement : {e}")

# Fonction pour pr√©dire un param√®tre
def predict_parameter():
    st.header("üîç Pr√©diction d‚Äôun Param√®tre Manquant")
    parametres = [
        'Total Coliform', 'Escherichia Coli', 'Faecal Streptococci', 'Turbidity', 'pH', 'Temperature',
        'Free Chlorine', 'Chlorates', 'Sulfate', 'Magnesium', 'Calcium', 'Conductivity', 'Dry Residue',
        'Complete Alkaline Title', 'Nitrite', 'Ammonium', 'Phosphate', 'Nitrate', 'Iron', 'Manganese',
        'Colour', 'Smell', 'Taste'
    ]

    # Choix du param√®tre cible
    parametre_cible = st.selectbox("Choisir le param√®tre √† pr√©dire :", parametres)

    # Saisie des autres param√®tres
    valeurs_pred = {}
    st.markdown("### ‚úèÔ∏è Saisie des autres param√®tres :")
    for param in parametres:
        if param != parametre_cible:
            valeurs_pred[param] = st.number_input(param, value=0.0, format="%.4f", key=f"pred_{param}")

    X_input = np.array([valeurs_pred[p] for p in valeurs_pred]).reshape(1, -1)

    # Pr√©diction avec Random Forest
    model_rf_file = f"modele_{parametre_cible.replace(' ', '_')}.pk1"
    if os.path.exists(model_rf_file):
        model_rf = joblib.load(model_rf_file)
        if st.button("üìà Pr√©dire avec Random Forest"):
            try:
                pred_rf = model_rf.predict(X_input)[0]
                st.success(f"üìä Valeur pr√©dite (RF) pour **{parametre_cible}** : `{pred_rf:.4f}`")
            except Exception as e:
                st.error(f"Erreur avec Random Forest : {e}")
    else:
        st.warning(f"Mod√®le RF non trouv√© : {model_rf_file}")

    # Pr√©diction avec Deep Learning
    model_dnn_file = f"modele_dnn_{parametre_cible.replace(' ', '_')}.h5"
    if os.path.exists(model_dnn_file):
        model_dnn = load_model(model_dnn_file)
        if st.button("ü§ñ Pr√©dire avec Deep Learning"):
            try:
                pred_dnn = model_dnn.predict(X_input)[0][0]
                st.success(f"ü§ñ Valeur pr√©dite (DNN) pour **{parametre_cible}** : `{pred_dnn:.4f}`")
            except Exception as e:
                st.error(f"Erreur avec Deep Learning : {e}")
    else:
        st.warning(f"Mod√®le DNN non trouv√© : {model_dnn_file}")

# Fonction pour d√©tecter le type de pollution
def detect_pollution():
    st.header("üß™ D√©tection du Type de Pollution")

    valeurs_pollution = {}
    for param in parametres:
        valeurs_pollution[param] = st.number_input(f"{param}", value=0.0, format="%.4f", key=f"poll_{param}")

    def detecter_type_pollution(valeurs):
        types = set()

        if valeurs["Escherichia Coli"] > 0 or valeurs["Total Coliform"] > 0 or valeurs["Faecal Streptococci"] > 0:
            types.add("biologique")
        if valeurs["Nitrate"] > 50 or valeurs["Nitrite"] > 0.5 or valeurs["Chlorates"] > 0.7 or valeurs["Phosphate"] > 5:
            types.add("chimique")
        if valeurs["Ammonium"] > 0.5 or valeurs["Turbidity"] > 5 or valeurs["Temperature"] > 25:
            types.add("organique")
        if valeurs["Iron"] > 0.3 or valeurs["Manganese"] > 0.1:
            types.add("m√©tallique")
        if valeurs["Calcium"] > 200 or valeurs["Magnesium"] > 50 or valeurs["Sulfate"] > 250 or valeurs["Dry Residue"] > 1500:
            types.add("min√©ralogique")
        if valeurs["Smell"] > 0 or valeurs["Taste"] > 0 or valeurs["Colour"] > 0:
            types.add("sensorielle")

        if not types:
            return ["aucune"], []

        # Recommandations automatiques
        conseils = []
        for t in types:
            if t == "biologique":
                conseils.append("üî¨ Pollution biologique d√©tect√©e : d√©sinfecter le r√©seau, v√©rifier la source.")
            elif t == "chimique":
                conseils.append("üß™ Pollution chimique d√©tect√©e : contr√¥ler les intrants agricoles ou industriels.")
            elif t == "organique":
                conseils.append("üß´ Pollution organique d√©tect√©e : renforcer la filtration et l‚Äôassainissement.")
            elif t == "m√©tallique":
                conseils.append("‚öôÔ∏è Pollution m√©tallique d√©tect√©e : utiliser des filtres sp√©cifiques (Fe/Mn).")
            elif t == "min√©ralogique":
                conseils.append("üß± Pollution min√©ralogique d√©tect√©e : v√©rifier la source et r√©duire les min√©raux dissous.")
            elif t == "sensorielle":
                conseils.append("üëÉ Pollution sensorielle d√©tect√©e : analyser les compos√©s organoleptiques.")

        return list(types), conseils

    if st.button("üß† D√©tecter le type de pollution", key="btn_detect_pollution"):
        types_detect√©s, conseils = detecter_type_pollution(valeurs_pollution)
        
        if "aucune" in types_detect√©s:
            st.success("‚úÖ Aucune pollution d√©tect√©e selon les normes.")
        else:
            st.error(f"‚ö†Ô∏è Types de pollution d√©tect√©s : {', '.join(types_detect√©s).capitalize()}")
            for c in conseils:
                st.info(c)

# Fonction pour l'assistant IA
def assistant_ia():
    st.title("ü§ñ Assistant IA ‚Äì Aide et support intelligent")

    # Historique de conversation
    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "Bonjour üëã, je suis l‚Äôassistant IA. Posez-moi vos questions sur l‚Äôapplication ou la qualit√© de l‚Äôeau."}]

    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # Zone de saisie utilisateur
    if prompt := st.chat_input("Posez votre question ici..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Appel √† l‚ÄôAPI OpenAI
        try:
            with st.chat_message("assistant"):
                with st.spinner("R√©flexion..."):
                    completion = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=st.session_state.messages
                    )
                    response = completion.choices[0].message.content
                    st.markdown(response)

            st.session_state.messages.append({"role": "assistant", "content": response})

        except Exception as e:
            st.error(f"Erreur d‚Äôappel √† l‚ÄôAPI OpenAI : {e}")

# Gestion de la navigation entre les pages
if "page" not in st.session_state:
    st.session_state.page = "home"

if st.session_state.page == "home":
    show_home_page()
else:
    show_main_page()

# Menu de navigation
show_navigation()

# Bouton de sortie
if st.button("üö™ Quitter l'application"):
    st.session_state.page = "home"
